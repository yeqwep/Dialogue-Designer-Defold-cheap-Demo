local resource = nil
local lang = "ENG"
local start_node = "START"
local next_node = ""
local nodes = {}

local tick = 0
local current = {}

local idle = false
local choices = false

local len = 0

local time = 0
local read_speed = 2

local name = ""
local text = ""

local execute = {}

local function load_json(self)
	resource = "/assets/res/defold_test.json"
	local d = json.decode(sys.load_resource(resource))
	nodes = d[1]['nodes']
end

local function next(self)
	len = 0
	tick = 0
	name = ""
	choices = false
	current = {}
	for i, ver in ipairs(nodes) do
		if ver["node_name"] == next_node then
			current = ver
			break
		end
	end

	if current["node_type"] == "start" then
		next_node = current["next"]
	elseif current["node_type"] == "show_message" then

		name = current["character"][1]
		text = current["text"][lang]

		if current["choices"] ~= nil then
			choices = true
			msg.post("/gui#choice", "show", current["choices"])
		else
			print("no choices")
		end
		print("slide_camera : " .. tostring(current["slide_camera"]))
		print("is_box : " .. tostring(current["is_box"]))

		if text ~= nil then
			len = utf8.len(text)
		else
			print("no text")
		end
		next_node = current["next"]
	elseif current["node_type"] == "execute" then
		execute = {}
		for k,v in string.gmatch(current["text"],"(%w+)=(%w+)") do
			execute[k] = v
		end
		pprint(execute)
		if execute["goto"] ~= nil then
			print(execute["goto"])
			msg.post("main:/handler", execute["goto"])
		end
		if execute["bg"] ~= nil then
			gui.play_flipbook(gui.get_node("bg"),execute["bg"])
		end
		if execute["pic"] ~= nil then
			gui.play_flipbook(gui.get_node("pic"),execute["pic"])
		end
		if execute["sound"] ~= nil then
			msg.post('main:/sound#', 'stop_sound')
			msg.post("main:/sound#" .. execute["sound"], "play_sound")
		end
		if execute["bgm"] ~= nil then
			msg.post('main:/bgm#', 'stop_sound')
			msg.post("main:/bgm#" .. execute["bgm"], "play_sound")
		end
		next_node = current["next"]
	elseif current["node_type"] == "set_local_variable" then
		print("value : " .. tostring(current["value"]))
		print("var_name : " .. tostring(current["var_name"]))
		next_node = current["next"]
	else
		print("no data")
	end

	gui.set_text(gui.get_node('name'), name)
end

local function arrow(self)
	if text == nil then
		gui.cancel_animation(gui.get_node("arrow"), 'position.y')
		gui.set_enabled(gui.get_node("arrow"), false)
	else
		gui.set_enabled(gui.get_node("arrow"), true)
		gui.animate(gui.get_node("arrow"), 'position.y', 20, gui.EASING_INSINE, 0.6, 0, nil, gui.PLAYBACK_LOOP_PINGPONG)
	end
end

local function play(self)
	if idle == false then
		if text == nil then
			if choices == false then
				arrow(self)
				next()
			end
		else
			if tick >= len then
				arrow(self)
				gui.set_text(gui.get_node("dialogue_text"), text)
				idle = true
				text = nil
			end
		end
	end
end
local function init_dialogue(self)
	len = 0
	time = 0
	name = ""
	text = nil
	execute = {}
	tick = 0
	idle = false
	-- resource load
	load_json()
	-- start_node load
	next_node = start_node
end

function init(self)
	msg.post(".", "acquire_input_focus")
	init_dialogue()
end

local function ticker(self)
	if tick < len then
		if time % read_speed == 0 then
			tick = tick + 1
			gui.set_text(gui.get_node("dialogue_text"), utf8.sub(text, 1, tick))
		end
	end
end

function update(self, dt)
	play(self)
	ticker(self)
	time = time + 1
end

function on_message(self, message_id, message, sender)
	if message_id == hash("selected") then
		next_node = current["choices"][message.s]["next"]
		print(next_node)
		choices = false
	end
end


function on_input(self, action_id, action)
	if action.pressed then
		if action_id == hash('enter') or action_id == hash('touch') then
			tick = len
			if idle == true then
				idle = false
			end
		end
	end
end